#!/bin/zsh

# Unified project maintenance agent
# Combines task list management, reporting, and development tasks

typeset -A CONFIG=(
  MODEL            "r1"
  MAX_ITERATIONS   100
  BASE_SLEEP       1
  TASK_SLEEP       60  
  REPORT_SLEEP     60
  MODE            "all"
  ITERATIONS       1
)

AIDER_ARGS=(
  --read spec.md
  --read issues.txt
  --file notes.md
  --model $MODEL
  --yes-always
  --no-auto-lint
  --edit-format whole
  --subtree-only
  "**/*py" "**/*md"
)

update_task_list() {
  echo "\n=== Updating Task List ==="
  aider ${AIDER_ARGS} task_list.md --message \
    'Review project and update task_list.md with prioritized, non-duplicated tasks'
  sleep $TASK_SLEEP
}

update_project_report() {
  echo "\n=== Updating Project Report ==="
  aider ${AIDER_ARGS} project_report.md --message \
    'Update project_report.md with current status, critical path, architecture issues, simplification opportunities. No long-term planning. Ensure accuracy and no duplication.'
  sleep $REPORT_SLEEP
}

handle_development_tasks() {
  echo "\n=== Handling Development Tasks ==="
  aider ${AIDER_ARGS} --auto-test --message \
    'Work on highest priority tasks. Prioritize low complexity and isolated micro-packages.'
  sleep $BASE_SLEEP
}

parse_arguments() {
  while [[ $# -gt 0 ]]; do
    case $1 in
      --tasks)
        CONFIG[MODE]="tasks"
        ;;
      --report)
        CONFIG[MODE]="report"
        ;;
      --dev)
        CONFIG[MODE]="dev"
        ;;
      --all)
        CONFIG[MODE]="all"
        ;;
      -i|--iterations)
        CONFIG[ITERATIONS]=$2
        shift
        ;;
      --help)
        help
        exit 0
        ;;
      *)
        echo "Unknown option: $1"
        help
        exit 1
        ;;
    esac
    shift
  done
}

run_cycle() {
  local cycle=$1
  echo "\n\n=== Cycle $cycle/$ITERATIONS ==="
  
  case $CONFIG[MODE] in
    "all")
      if (( cycle % 60 == 0 )); then update_task_list; fi
      if (( cycle % 60 == 30 )); then update_project_report; fi
      handle_development_tasks
      ;;
    "tasks")
      update_task_list
      ;;
    "report")
      update_project_report
      ;;
    "dev")
      handle_development_tasks
      ;;
  esac
}

help() {
  echo "Project Maintenance Agent - Unified Development Orchestrator"
  echo "Version: 1.2.0 | License: MIT | Model: ${CONFIG[MODEL]}"
  echo "Usage: ./project_agent [OPTIONS]"
  
  echo "\nOPERATIONAL MODES:"
  echo "  --tasks       Focus only on task list maintenance (task_list.md)"
  echo "  --report      Generate project status reports (project_report.md)"
  echo "  --dev         Execute development tasks only (code changes)"
  echo "  --all         Full operational mode (default)"
  
  echo "\nOPTIONS:"
  echo "  -i, --iterations <NUM>  Set execution cycles (default: ${CONFIG[ITERATIONS]})"
  echo "  --help                  Show this help menu"
  
  echo "\nCONFIGURATION DEFAULTS:"
  echo "  Max Iterations: ${CONFIG[MAX_ITERATIONS]}"
  echo "  Base Sleep: ${CONFIG[BASE_SLEEP]}s"
  echo "  Task Sleep: ${CONFIG[TASK_SLEEP]}s"
  echo "  Report Sleep: ${CONFIG[REPORT_SLEEP]}s"
  
  echo "\nEXAMPLES:"
  echo "  ./project_agent --tasks -i 5     # Refresh task list 5 times"
  echo "  ./project_agent --report         # Generate status report"
  echo "  ./project_agent --dev            # Continuous development mode"
  echo "  ./project_agent --all -i 100     # Full operation for 100 cycles"
  
  echo "\nNOTES:"
  echo "  - Task priorities update automatically based on project state"
  echo "  - Reports include architecture analysis and simplification opportunities"
  echo "  - Development mode prefers isolated, low-complexity changes"
  echo "  - Use 'aider --help' for details on the underlying AI agent"
}

main() {
  parse_arguments "$@"
  for ((i=1; i<=${CONFIG[ITERATIONS]}; i++)); do
    run_cycle $i
  done
}

main "$@"
