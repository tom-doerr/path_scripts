#!/bin/bash

# git_diff_watch - Continuously display the last git commit diff with color
# Usage: git_diff_watch [interval_seconds] [additional_git_diff_args]

# Default refresh interval in seconds
INTERVAL=${1:-2}
shift 2>/dev/null

# Check if we're in a git repository
if ! git rev-parse --is-inside-work-tree >/dev/null 2>&1; then
    echo "Error: Not in a git repository"
    exit 1
fi

# Function to set up the terminal for smooth updates
setup_terminal() {
    # Save cursor position and switch to alternate screen buffer
    tput smcup
    # Hide cursor
    tput civis
}

# Function to restore terminal to normal state
restore_terminal() {
    # Show cursor
    tput cnorm
    # Return from alternate screen buffer
    tput rmcup
}

# Function to update the screen without flickering
update_screen() {
    # Move to top-left corner
    tput home
    # Clear to end of screen (doesn't cause flickering)
    tput ed
}

# Function to display the diff with a header
show_diff() {
    update_screen

    # Get the last commit hash and message
    LAST_COMMIT=$(git log -1 --pretty=format:"%h - %s (%cr) by %an")

    # Print header with timestamp
    echo -e "\033[1;36m=== Last Commit Diff (Updated: $(date '+%Y-%m-%d %H:%M:%S')) ===\033[0m"
    echo -e "\033[1;33m$LAST_COMMIT\033[0m"
    echo -e "\033[1;36m=======================================================\033[0m"
    echo ""

    # Show the diff with color
    git --no-pager diff HEAD~1 HEAD --color=always "$@"

    echo ""
    echo -e "\033[1;36m=== Press Ctrl+C to exit ===\033[0m"
}

# Trap Ctrl+C to exit gracefully
trap "restore_terminal; echo -e '\nExiting git diff watch'; exit 0" INT

# Main loop
setup_terminal
echo "Watching git diff, refreshing every $INTERVAL seconds. Press Ctrl+C to exit."
sleep 1  # Give user a moment to read the initial message
while true; do
    show_diff "$@"
    sleep $INTERVAL
done
