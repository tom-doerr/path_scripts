#!/bin/bash

# git-diff-watch - Continuously display the last git commit diff with color
# Usage: git-diff-watch [check_interval_seconds] [additional_git_diff_args]

# Default check interval in seconds
INTERVAL=${1:-2}
shift 2>/dev/null

# Check if we're in a git repository
if ! git rev-parse --is-inside-work-tree >/dev/null 2>&1; then
    echo "Error: Not in a git repository"
    exit 1
fi

# Get the initial HEAD commit hash
LAST_KNOWN_COMMIT=$(git rev-parse HEAD 2>/dev/null)

# Use a simpler approach with direct output to terminal
setup_display() {
    # Function to clear screen without flickering
    clear_screen() {
        tput clear
    }
    
    # Clean up function
    cleanup() {
        tput cnorm  # Show cursor
        echo -e "\nExiting git diff watch"
        exit 0
    }
    
    # Set trap for cleanup
    trap cleanup INT TERM EXIT
    
    # Hide cursor for cleaner display
    tput civis
}

# Function to check if there's a new commit
check_for_new_commit() {
    # Get current HEAD commit
    CURRENT_COMMIT=$(git rev-parse HEAD 2>/dev/null)
    
    # Compare with last known commit
    if [[ "$CURRENT_COMMIT" != "$LAST_KNOWN_COMMIT" ]]; then
        LAST_KNOWN_COMMIT=$CURRENT_COMMIT
        return 0  # New commit detected
    fi
    
    return 1  # No new commit
}

# Function to display the diff with a header
show_diff() {
    clear_screen
    
    # Get the last commit hash and message
    LAST_COMMIT=$(git log -1 --pretty=format:"%h - %s (%cr) by %an")

    # Print header with timestamp
    echo -e "\033[1;36m=== Last Commit Diff (Updated: $(date '+%Y-%m-%d %H:%M:%S')) ===\033[0m"
    echo -e "\033[1;33m$LAST_COMMIT\033[0m"
    echo -e "\033[1;36m=======================================================\033[0m"
    echo ""
    
    # Show the diff with color
    git --no-pager diff HEAD~1 HEAD --color=always "$@"
    
    echo ""
    echo -e "\033[1;36m=== Press Ctrl+C to exit ===\033[0m"
}

# Main execution
echo "Starting git diff watch, checking for new commits every $INTERVAL seconds..."
setup_display

# Show initial diff
show_diff "$@"

# Main loop
while true; do
    # Check for new commits
    if check_for_new_commit; then
        # New commit detected, update the display
        show_diff "$@"
        echo -e "\033[1;32mNew commit detected, updated diff.\033[0m" >&2
    fi
    
    # Brief status update without clearing screen
    tput cup $(($(tput lines) - 1)) 0  # Move to bottom line
    echo -e "\033[K\033[1;36mLast check: $(date '+%H:%M:%S') | Press Ctrl+C to exit\033[0m"
    
    # Wait before next check
    sleep $INTERVAL
done
