#!/bin/bash

# Configuration
MODEL="r1"  # Default model
PROMPTS_FILE="prompts.txt"  # File containing prompts to cycle through
ITERATIONS=1000
SLEEP_TIME=1  # Sleep time between iterations in seconds

# Check if rich-cli is installed
if ! command -v rich &> /dev/null; then
    echo "Installing rich-cli for better formatting..."
    pip install rich-cli
fi

# Default prompts
DEFAULT_PROMPTS=(
    "improve code structure and organization"
    "add more error handling and edge cases"
    "optimize performance where possible"
    "improve documentation and comments"
    "refactor for better readability"
    "add unit tests for critical functions"
    "implement additional features"
    "fix potential bugs and issues"
)

# Create default prompts file if it doesn't exist
if [ ! -f "$PROMPTS_FILE" ]; then
    echo "Creating default prompts file: $PROMPTS_FILE"
    printf "%s\n" "${DEFAULT_PROMPTS[@]}" > "$PROMPTS_FILE"
fi

# Initial check if prompts file exists and is not empty
if [ ! -s "$PROMPTS_FILE" ]; then
    echo "Error: Prompts file is empty or doesn't exist: $PROMPTS_FILE"
    exit 1
fi

# Initial count of prompts
PROMPT_COUNT=$(wc -l < "$PROMPTS_FILE")
echo "Found $PROMPT_COUNT prompts in $PROMPTS_FILE"
echo "Note: Changes to $PROMPTS_FILE will be detected automatically on each iteration"

# Function to display usage information
usage() {
    echo "Usage: $0 [options] [file1 [file2 ...]]"
    echo "Options:"
    echo "  -m, --model MODEL       Set the model (default: $MODEL)"
    echo "  -p, --prompts FILE      Set the prompts file (default: $PROMPTS_FILE)"
    echo "  -i, --iterations NUM    Set number of iterations (default: $ITERATIONS)"
    echo "  -s, --sleep SECONDS     Set sleep time between iterations (default: $SLEEP_TIME)"
    echo "  -n, --no-files          Run without specifying files (architect mode can add files)"
    echo "  -h, --help              Display this help message"
    exit 1
}

# Parse command line arguments
FILES=()
NO_FILES=false
while [[ $# -gt 0 ]]; do
    case $1 in
        -m|--model)
            MODEL="$2"
            shift 2
            ;;
        -p|--prompts)
            PROMPTS_FILE="$2"
            # Create default prompts file if specified file doesn't exist
            if [ ! -f "$PROMPTS_FILE" ]; then
                echo "Creating specified prompts file: $PROMPTS_FILE"
                printf "%s\n" "${DEFAULT_PROMPTS[@]}" > "$PROMPTS_FILE"
            fi
            shift 2
            ;;
        -n|--no-files)
            NO_FILES=true
            shift
            ;;
        -i|--iterations)
            ITERATIONS="$2"
            shift 2
            ;;
        -s|--sleep)
            SLEEP_TIME="$2"
            shift 2
            ;;
        -h|--help)
            usage
            ;;
        -*)
            echo "Unknown option: $1"
            usage
            ;;
        *)
            FILES+=("$1")
            shift
            ;;
    esac
done

# Check if at least one file is provided or --no-files flag is set
if [ ${#FILES[@]} -eq 0 ] && [ "$NO_FILES" = false ]; then
    echo "Error: No files specified. Use --no-files flag if you want to run without specifying files."
    usage
fi

# Check if all specified files exist (only if files were provided)
if [ ${#FILES[@]} -gt 0 ]; then
    for FILE in "${FILES[@]}"; do
        if [ ! -f "$FILE" ]; then
            echo "Error: File does not exist: $FILE"
            exit 1
        fi
    done
fi

# Function to handle script interruption
cleanup() {
    echo -e "\nScript interrupted. Exiting gracefully..."
    exit 0
}

# Set up trap for CTRL+C
trap cleanup SIGINT SIGTERM

# Main loop
for i in $(seq 1 $ITERATIONS); do
    # Reload prompt count on each iteration to detect changes
    PROMPT_COUNT=$(grep -v '^\s*$' "$PROMPTS_FILE" | wc -l)
    
    if [ "$PROMPT_COUNT" -eq 0 ]; then
        echo "Warning: No valid prompts found in $PROMPTS_FILE. Using default prompt."
        CURRENT_PROMPT="improve code"
    else
        # Get a list of non-empty lines
        VALID_PROMPTS=($(grep -v '^\s*$' "$PROMPTS_FILE"))
        
        # Calculate which prompt to use (cycling through them)
        PROMPT_INDEX=$(( (i - 1) % PROMPT_COUNT ))
        CURRENT_PROMPT="${VALID_PROMPTS[$PROMPT_INDEX]}"
    fi
    
    # Display the current prompt with rich formatting
    echo -e "\n"
    rich --print "[bold blue]Iteration $i - $(date)[/bold blue]" 
    rich --print "[bold green]====================================================[/bold green]"
    rich --print "[bold yellow]PROMPT:[/bold yellow] [bold white]$CURRENT_PROMPT[/bold white]"
    rich --print "[bold green]====================================================[/bold green]"
    
    # Run aider with the current prompt and all files (if any)
    if [ "$NO_FILES" = true ]; then
        # Run without specifying files
        aider --architect --model "$MODEL" --subtree-only \
              --read plex.md --read context.txt --read spec.md \
              --yes-always --no-show-model-warnings \
              --weak-model 'openrouter/google/gemini-2.0-flash-001' \
              --message "$CURRENT_PROMPT"
    else
        # Run with specified files
        aider --architect --model "$MODEL" --subtree-only \
              --read plex.md --read context.txt --read spec.md \
              --yes-always --no-show-model-warnings \
              --weak-model 'openrouter/google/gemini-2.0-flash-001' \
              --message "$CURRENT_PROMPT" "${FILES[@]}"
    fi
    
    rich --print "[dim]Sleeping for $SLEEP_TIME seconds...[/dim]"
    sleep $SLEEP_TIME
done
